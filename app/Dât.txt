    private void importAccounts() {
        Map<String, Object> accountData = new HashMap<>();
        accountData.put("uid", "admin");
        accountData.put("email", "taydamkhoida@gmail.com");
        accountData.put("phoneNumber", "0705688386");
        accountData.put("password", "123123A"); // Store hashed passwords in production
        accountData.put("roleId", 1);
        accountData.put("status", true);
        accountData.put("createdAt", System.currentTimeMillis());
        accountData.put("updatedAt", System.currentTimeMillis());

        db.collection("accounts").document("admin").set(accountData)
                .addOnSuccessListener(aVoid -> Log.d(TAG, "Tài khoản đã được import thành công"))
                .addOnFailureListener(e -> Log.w(TAG, "Lỗi khi import tài khoản: ", e));
    }
    private void importCustomers() {
        List<Map<String, Object>> customersData = Arrays.asList(
                createCustomer("admin", "Mike TySon Cổng Đồn", "Tân Mỹ, Văn Lãng, Lạng Sơn", "2004-04-19", "Nam"),
                createCustomer("customerUID456", "Nguyễn Văn A", "123 Đường Lê Lợi, Quận 1, TP.HCM", "1990-01-01", "Nam"),
                createCustomer("customerUID789", "Nguyễn Thị B", "456 Đường Trần Hưng Đạo, Quận 5, TP.HCM", "1995-02-15", "Nữ")
        );

        for (Map<String, Object> customer : customersData) {
            db.collection("customers").document((String) customer.get("uid"))
                    .set(customer)
                    .addOnSuccessListener(aVoid -> Log.d(TAG, "Khách hàng đã được import thành công: " + customer.get("fullName")))
                    .addOnFailureListener(e -> Log.w(TAG, "Lỗi khi import khách hàng: ", e));
        }
    }

    private Map<String, Object> createCustomer(String uid, String fullName, String address, String birthday, String gender) {
        Map<String, Object> customer = new HashMap<>();
        customer.put("uid", uid);
        customer.put("fullName", fullName);
        customer.put("address", address);
        customer.put("birthday", "23/12/2004"); // Use the correct date format
        customer.put("gender", gender);
        customer.put("createdAt", FieldValue.serverTimestamp());
        customer.put("updatedAt", FieldValue.serverTimestamp());
        return customer;
    }

    private void importDishes() {
        List<Map<String, Object>> dishesData = Arrays.asList(
                createDish("PHOBO001", "Phở bò", "Món ăn truyền thống Việt Nam", 50000, 1,
                        "https://fohlafood.vn/cdn/shop/articles/bi-quyet-nau-phi-bo-ngon-tuyet-dinh.jpg?v=1712213789"),
                createDish("CHEDODEN001", "Chè đỗ đen", "Món tráng miệng truyền thống Việt Nam", 25000,
                        2,
                        "https://i.ytimg.com/vi/z-XMpQGH6UE/maxresdefault.jpg")
        );

        for (Map<String, Object> dish : dishesData) {
            db.collection("dishes").document((String) dish.get("dishId"))
                    .set(dish)
                    .addOnSuccessListener(aVoid -> Log.d(TAG, "Món ăn đã được import thành công: " + dish.get("dishName")))
                    .addOnFailureListener(e -> Log.w(TAG, "Lỗi khi import món ăn: ", e));
        }
    }

    private void importOrderStatus() {
        List<Map<String, Object>> orderStatusData = Arrays.asList(
                createOrderStatus("PENDING", "Đang chờ xử lý"),
                createOrderStatus("PROCESSING", "Đang xử lý"),
                createOrderStatus("DELIVERED", "Đã giao hàng")
        );

        for (Map<String, Object> status : orderStatusData) {
            db.collection("orderStatus").document((String) status.get("statusId"))
                    .set(status)
                    .addOnSuccessListener(aVoid -> Log.d(TAG, "Trạng thái đơn hàng đã được import thành công: " + status.get("statusName")))
                    .addOnFailureListener(e -> Log.w(TAG, "Lỗi khi import trạng thái đơn hàng: ", e));
        }
    }

    private void importPaymentMethods() {
        List<Map<String, Object>> paymentMethodsData = Arrays.asList(
                createPaymentMethod("COD", "Thanh toán khi nhận hàng"),
                createPaymentMethod("CREDIT", "Thẻ tín dụng")
        );

        for (Map<String, Object> method : paymentMethodsData) {
            db.collection("paymentMethods").document((String) method.get("paymentMethodId"))
                    .set(method)
                    .addOnSuccessListener(aVoid -> Log.d(TAG, "Phương thức thanh toán đã được import thành công: " + method.get("paymentMethodName")))
                    .addOnFailureListener(e -> Log.w(TAG, "Lỗi khi import phương thức thanh toán: ", e));
        }
    }

    private Map<String, Object> createDish(String dishId, String dishName, String description,
                                           int price, int dishCategoryId, String imageUrl) {
        Map<String, Object> dish = new HashMap<>();
        dish.put("dishId", dishId);
        dish.put("dishName", dishName);
        dish.put("description", description);
        dish.put("price", price);
        dish.put("dishCategoryId", dishCategoryId);
        dish.put("imageUrl", imageUrl);
        dish.put("status", 1);
        dish.put("createdAt", FieldValue.serverTimestamp());
        dish.put("updatedAt", FieldValue.serverTimestamp());
        return dish;
    }

    private Map<String, Object> createOrderStatus(String statusId, String statusName) {
        Map<String, Object> status = new HashMap<>();
        status.put("statusId", statusId);
        status.put("statusName", statusName);
        return status;
    }

    private Map<String, Object> createPaymentMethod(String paymentMethodId, String paymentMethodName) {
        Map<String, Object> method = new HashMap<>();
        method.put("paymentMethodId", paymentMethodId);
        method.put("paymentMethodName", paymentMethodName);
        return method;
    }



//Data 
String[] mang1={"Nem chua Bình Phước","Bún Bò Huế","Bánh tráng cuốn thịt theo "};
            String[] desc={"Nem chua lá liễu, món đặc sản truyền thống của người dân địa phương Tiên Phước, Quảng Nam, được dùng làm món khai vị trong các bữa ăn. Nem chua lá liễu có vị cay thơm của tiêu Tiên Phước, vị chua lên men được ủ chín từ lá liễu cộng chút bùi bùi béo béo của thịt lợn quê, làm tan chảy bao dạ dày, chỉ nhìn thôi đã muốn ăn ngay rồi!",
            "Bún bò Huế là một món ăn hiếm hoi trên thế giới kết hợp cả thịt bò và thịt heo mà không gây xung khắc, tạo nên một hương vị độc đáo. Nếu có cơ hội đến Huế, hãy tìm cho mình một quán bún để thưởng thức hương vị ngọt ngào của đất cố đô.\n" +
                    "\n" +
                    "Một tô bún bò Huế không chỉ là món ăn mà còn là một phần của văn hóa, gợi nhớ đến vẻ đẹp của xứ Huế với màu sắc và hương vị quyến rũ. Nước lèo đỏ rực như bình minh trên đầm Chuồn, kết hợp với sợi bún trắng mềm, thịt bò nâu sậm, giò heo vàng ươm, chả cua đậm đà và huyết luộc vuông vức, tất cả tạo nên một món ăn đầy ý vị và công phu của những người nấu bún - những nghệ sĩ thực thụ của ẩm thực."
            ,"Bánh tráng thịt Heo hấp với thịt mềm ngọt, mọng nước, phần da giòn dai. Khi ăn cuốn cùng các loại rau gia vị như lá cóc non, rau húng, hẹ… chấm cùng mắm nêm chuẩn vị rất hấp dẫn và thanh đạm.\n" +
                    "\n" +
                    "Việt Nam ta từ lâu đã luôn tự hào về nền văn hóa đa dạng, đậm đà bản sắc. Một trong số đó, chúng ta được bạn bè thế giới biết đến với nền ẩm thực rất đặc trưng, nhiều món ngon không đâu có. Với lợi thế là một nước có ngành nông nghiệp phát triển, những món ăn này không chỉ thơm ngon mà còn giàu dinh dưỡng."};
        String[] list={"https://firebasestorage.googleapis.com/v0/b/appfoodmanager-6cfcf.appspot.com/o/nem-chua-la-lieu-tien-phuoc-b.jpg?alt=media&token=2d17c6a4-9312-4f4c-a300-d57b23ba99ac",
        "https://firebasestorage.googleapis.com/v0/b/appfoodmanager-6cfcf.appspot.com/o/bun_bo_hue0933.jpg?alt=media&token=52edaf02-70c6-42a7-81ff-977f7241a839",
        "https://firebasestorage.googleapis.com/v0/b/appfoodmanager-6cfcf.appspot.com/o/1462847304_banh-trang-thit-heo-1.jpg?alt=media&token=450267c2-42ae-4654-9e8f-6fc26cd805cb"};
            int[] price={4500,45000,65000};
        int[] cate={2,1,3};
            ConnectFirebase.db =FirebaseFirestore.getInstance();
        for(int i=0;i<mang1.length;i++) {
            Map<String, Object> dishData = new HashMap<>();
            dishData.put("createdAt", FieldValue.serverTimestamp());
            dishData.put("description", desc[i]);
            dishData.put("dishCategoryId", cate[i]);
            dishData.put("dishName", mang1[i]);
            dishData.put("imageUrl", list[i]);
            dishData.put("price", price[i]);
            dishData.put("sell", 648);
            dishData.put("status", 1);
            dishData.put("updatedAt", FieldValue.serverTimestamp()); // Use Firestore's server timestamp
            ConnectFirebase.db.collection("dishes")
                    .add(dishData)
                    .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {
                        @Override
                        public void onSuccess(DocumentReference documentReference) {
                            // Get the generated document ID
                            String generatedId = documentReference.getId();

                            // Update the document with the ID as dishId
                            documentReference.update("dishId", generatedId)
                                    .addOnSuccessListener(aVoid -> Log.d("FirestoreHelper", "Dish added with ID: " + generatedId))
                                    .addOnFailureListener(e -> Log.w("FirestoreHelper", "Error updating dishId", e));
                        }
                    })
                    .addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            Log.w("FirestoreHelper", "Error adding dish", e);
                        }
                    });
        }